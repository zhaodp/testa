<?php
/**
 * 夜间补贴计算器
 *
 * Created by PhpStorm.
 * User: tuan
 * Date: 14/11/29
 * Time: 13:20
 */

class SubsidyCalculator extends Calculator {
	private $cityId;
	private $startTime;
	private $endTime;
	private $orderType ;

	function __construct($cityId, $orderType, $timeStart, $timeEnd)
	{
		$this->cityId = $cityId;
		$this->orderType = $orderType;
		$this->endTime = $timeEnd;
		$this->startTime = $timeStart;
	}


	function validator()
	{
		return true; // TODO: Change the autogenerated stub
	}

	public function toString()
	{
		return parent::toString(); // TODO: Change the autogenerated stub
	}

	protected function getFee()
	{
		$fee = 0.00;
		$orderType = $this->orderType;
		$cityId    = $this->cityId;
		if(FinanceConstants::ORDER_TYPE_DAYTIME == $orderType){
            $daytime_type = CityConfigService::dayTimeStatus($cityId);
			if($daytime_type && isset(Yii::app()->params['daytime_price_new'][$daytime_type])){
				$day_time_data = Yii::app()->params['daytime_price_new'][$daytime_type];
				EdjLog::info('subsidyconfig --- '.json_encode($day_time_data));
				$config = $day_time_data['allowance'];
				$preEnd = '';
				foreach($config as $item){
					$fee += $this->getRangeFee($item, $this->startTime, $this->endTime, $preEnd);
					$preEnd = $item['end_time'];
				}
			}
		}
		return $fee;
	}

	private function getRangeFee($config, $timeStart, $timeEnd, $preConfigEnd){
		$configStart  = $config['start_time'];
		$configEnd    = $config['end_time'];
		$unit		  = $config['unit'];
		$price        = $config['price'];
		$today = date('Y-m-d');
		$tomorrow = date('Y-m-d', strtotime('+1 day'));
		if($configStart < $preConfigEnd  || $configStart > $configEnd){//如果配置里面现在的开始的时间小于上一个结束的时间,那么配置就是跨天了
			$configStart  = strtotime($tomorrow.' '. $configStart);
			$configEnd    = strtotime($tomorrow.' '. $configEnd);
		}else{
			$configStart  = strtotime($today.' '. $configStart);
			$configEnd    = strtotime($today.' '. $configEnd);
		}
		$hourStart = date('H:i', $timeStart);
		$hourEnd   = date('H:i', $timeEnd);
		if($hourEnd < $hourStart){
			$timeStart = strtotime($today.' '. $hourStart);
			$timeEnd   = strtotime($tomorrow. ' '. $hourEnd);
		}else{
			$timeStart = strtotime($today.' '. $hourStart);
			$timeEnd   = strtotime($today. ' '. $hourEnd);
		}
		$count = $this->getCountOfHalfHour($timeStart, $timeEnd, $configStart, $configEnd, $unit);
		return $count * $price;
	}

	private function  getCountOfHalfHour($timeStart, $timeEnd, $configStart, $configEnd, $unit){
		$count = 0 ;
		$start  = $configStart;
		$end    = $configEnd;
		if($timeStart > $configStart){
			$start = $timeStart;
		}
		if($timeEnd  < $configEnd){
			$end = $timeEnd;
		}
		if($start < $end){
			$count = ceil(($end - $start)  / ($unit * 60));
		}
		return $count;
	}


}