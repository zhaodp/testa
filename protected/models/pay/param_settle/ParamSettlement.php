<?php
/**
 * 根据传递的参数进行结账
 *
 * User: tuan
 * Date: 14/11/29
 * Time: 13:27
 */
Yii::import('application.models.pay.param_impl.*');
class ParamSettlement extends OrderSettle{
	private $params;

	private $orderType ;
	private $vip;
	private $customer;

	function __construct($params, $order, $orderExt, $favorable)
	{
		parent::__construct($order, $orderExt,$favorable);
		$this->params = $params;
		$this->orderType = FinanceUtils::getOrderType($order);
	}


	public function init()
	{
		$order = $this->getOrder();
		$customerPhone = $order['phone'];
		$vipCard = $order['vipcard'];
		if (!empty($vipCard)) {
            $vip = VipService::service()->getVipInfoByVipCard($vipCard, false);
            $this->setVip($vip);
		} else {
            $customerAccount = NormalAccountService::forceGetUserAmount($customerPhone);
            $this->setCustomer(array(
                'id'	=> $customerAccount['user_id'],
                'amount'=> $customerAccount['amount'],
            ));
		}
	}

	public  function settlement()
	{
		$total = 0;
		//校验参数
		if(empty($this->params)){
			return $total;
		}
		//获得传入参数里面满足要求的参数列表,根据订单类型以及财务配置里面配置的支持
		$params = $this->getLegalParamList();
		//根据这一订单支持的参数列表, 构建 参数链条
		$chain =  $this->getChain($params);
		$this->init();
		$this->settle($chain);
		//遍历参数列表进行结账
		return parent::settlement(); // TODO: Change the autogenerated stub
	}

	private function settle($chain){
		$settledMoney = 0;
		foreach($chain as $item){
			$ret = null;
			$favorable = $this->getFavorable();
			if($item->isVip()){
				$ret = $this->orderVip($item, $settledMoney);
			}else{
				$ret = $this->orderNormal($item, $settledMoney);
			}
			if(FinanceConstants::isSuccess($ret)){
				$tmp = isset($ret['settled_money']) ? $ret['settled_money'] : 0;
				$favorableBalance = $this->getFavorable();
				$favorableUsed  = $favorable - $favorableBalance; // 优惠抵用的,需要算作已经结账部分
				$settledMoney = $settledMoney + $tmp + $favorableUsed;
			}
		}
	}

	private function orderNormal($settleParam, $settledMoney){
		$customer = $this->getCustomer();
		if (empty($customer)) {
			return array(
				'code' => FinanceConstants::CODE_SUCCESS,
			);
		}
		$userId = $customer['id'];
		$customerBalance = $customer['amount'];
		$excepted = $settleParam->getExcepted();
		$favorable = $this->getFavorable();
		$money = $this->getUserDelta($excepted, $settledMoney);
		if (0 != $money) {
			$delta = $money * -1;
			$orderId = $this->getOrderId();
			$comment  = sprintf($settleParam->getUserComment(), $orderId);
			$customerTransAttributes = array(
				'user_id' => $userId,
				'trans_order_id' => $orderId,
				'trans_type' => $settleParam->getUserType(),
				'amount' => $delta,
				'balance' => $customerBalance + $delta,
				'source' => $settleParam->getUserSource(),
				'remark' => $comment,
			);
			$customerAccountAttributes = array(
				'user_id' => $userId,
				'amount' => $delta,
			);
			$code = FinanceConstants::CODE_FAIL;
			$ret = $this->chargeNormal($customerTransAttributes, $customerAccountAttributes);
			if ($ret) {
				$this->notify($this->getUserPhone());
				$type = $settleParam->getDriverType();
				$channel = $settleParam->getDriverChannel();
				$comment = sprintf($settleParam->getDriverComment(), $orderId);
				$code = FinanceConstants::CODE_SUCCESS;
				if(0 != $delta){//小费为0 ,不记入流水
					$this->orderDriver($type, $channel, $money, $comment);
				}
			} else {
				$message = 'charge normal user in param  settlement fail';
				$this->alarm($message);
			}
			return array(
				'code' => $code,
				'settled_money' => $money,
			);
		}else{
			$favorableUsed = ($favorable - $this->getFavorable()) > 0 ? ($favorable - $this->getFavorable()) : 0;
			return array(
				'code'	=> FinanceConstants::CODE_SUCCESS,
				'settled_money' => $excepted - $favorableUsed, //如果要扣除的金额为0,那么有可能是现金已经足够抵用了,所以返回预期的金额, 如果有优惠券抵用,需要避免后面重复的加已经计算金额
			);
		}
	}

	private function orderVip($settleParam, $settledMoney){
		$vip = $this->getVip();
		if (empty($vip)) {
			return array(
				'code' => FinanceConstants::CODE_SUCCESS,
			);
		}
		//get order subsidy
		$excepted = $settleParam->getExcepted();
		$favorable = $this->getFavorable();
		$money = $this->getUserDelta($excepted, $settledMoney);
		if (0 != $money) {
			$delta  = $money;//如果 type 为 TYPE_ORDER 插入流水的时候会 * -1
			$vipBalance = $vip['amount'];
			$vipCard = $vip['vipid'];
			$comment  = sprintf($settleParam->getUserComment(), $this->getOrderId());
			$vipTradeAttributes = array(
				'vipcard' => $vipCard,
				'order_id' => $this->getOrderId(),
				'type' => $settleParam->getUserType(),
				'source' => $settleParam->getUserSource(),
				'amount' => $delta,
				'comment' => $comment,
				'balance' => $vipBalance - $delta,//TODO
				'order_date' => $this->getOrderCreated(),
			);

			$vipBalanceAttributes = array(
				'vipCard' => $vipCard,
				'delta' => $delta * -1,
			);
			$code = FinanceConstants::CODE_FAIL;
			$ret = $this->chargeVip($vipTradeAttributes, $vipBalanceAttributes);
			if ($ret) {
				$this->notify($this->getUserPhone());
				$type = $settleParam->getDriverType();
				$channel = $settleParam->getDriverChannel();
				$comment = sprintf($settleParam->getDriverComment(), $this->getOrderId());
				$code = FinanceConstants::CODE_SUCCESS;
				if(0 != $delta){//小费为0 ,不记入流水
					$this->orderDriver($type, $channel, $money, $comment); // 注意值的正负
				}
			} else {
				$message = 'charge vip user in  params  settlement fail';
				$this->alarm($message);
			}
			return array(
				'code' => $code,
				'settled_money' => $money,
			);
		}else{
			$favorableUsed = ($favorable - $this->getFavorable()) > 0 ? ($favorable - $this->getFavorable()) : 0;
			return array(
				'code'	=> FinanceConstants::CODE_SUCCESS,
				'settled_money' => $excepted - $favorableUsed, //如果要扣除的金额为0,那么有可能是现金已经足够抵用了,所以返回预期的金额, 如果有优惠券抵用,需要避免后面重复的加已经计算金额
			);
		}
	}

	private function orderDriver($type, $channel, $delta, $comment){
		$order = $this->getOrder();
		$employeeAccountAttributes = array();
		$employeeAccountAttributes['channel'] = $channel;
		$employeeAccountAttributes['comment'] = $comment;
		$employeeAccountAttributes['order_date'] = time();
		$employeeAccountAttributes['type'] = $type;
		$employeeAccountAttributes['city_id'] = $order['city_id'];
		$employeeAccountAttributes['operator'] = 'system';
		$employeeAccountAttributes['user'] = $order['driver_id'];
		$employeeAccountAttributes['cast'] = $delta;
		$employeeAccountAttributes['order_id'] = $order['order_id'];
		$ret  = $this->chargeDriver($employeeAccountAttributes);
		if(!$ret){
			$message = 'charge driver in param  settlement fail';
			$this->alarm($message);
		}
	}
	/**
	 * 返回能从用户账户扣除的钱
	 *
	 * @param $expected |期望要扣除的钱
	 * @param $settledMoney |已经扣除的钱
	 */
	private function getUserDelta($expected, $settledMoney)
	{
		$delta = 0;
		$phone = $this->getUserPhone();
		$price = $this->getPrice();
		$orderMoney = FinanceCastHelper::getOrderTotalMoney(
												$this->getOrder(), $this->getOrderExt(), $this->params);
		$balanceCast = $orderMoney - $price  - $settledMoney;
		if (0 >= $balanceCast) {
			$delta = 0; //不需要从用户的余额里面扣除了, 现金抵消了小费
		} else {
			if ($expected > $balanceCast) { // 现金已经可以抵消部分小费了
				$delta = $balanceCast;
			} else {
				$delta = $expected; //现金支付仍然不够,需要全部从余额里面扣除补贴
			}
		}
		//能够享受到的优惠
		$favorable = $this->getFavorable();
		if (0 < $favorable) {
			//优惠 加起来,已经超过了里程费 + 补贴
			$favorableBalance = $favorable;
			if ($favorable < 0) {
				$favorableBalance = 0;
			}
			if ($favorable > $delta) {
				$favorableBalance = $favorable - $delta;
				$delta = 0;
			} else {
				$delta = $delta - $favorable;
				$favorableBalance = 0;
			}
			$this->setFavorable($favorableBalance);
		}
		$format = 'param user delta, order_id|%s|order_money|%s|price|%s|income|%s|settled_money|%s| favorable|%s|expected|%s|delta|%s|balance_cast|%s|';
		EdjLog::info(sprintf($format, $this->getOrderId(), $orderMoney, $price, $this->getIncome(), $settledMoney, $favorable, $expected, $delta, $balanceCast));
		return $delta;
	}

	private function getLegalParamList(){
		return FinanceUtils::getLegalParamList($this->orderType, $this->params);
	}

	private function getChain($params = array()){
		$settleParams = array();
		$orderType = $this->orderType;
		$isVip = $this->isVip();
		foreach($params as $k => $v){
			$settleParam = new SettleParam($k, $v, $orderType, $isVip);
			$settleParams[] = $settleParam;
		}
		//TODO ... add log here
		return $settleParams;
	}

	/**
	 * @param mixed $vip
	 */
	public function setVip($vip)
	{
		$this->vip = $vip;
	}

	/**
	 * @return mixed
	 */
	public function getVip()
	{
		return $this->vip;
	}

	/**
	 * @param mixed $customer
	 */
	public function setCustomer($customer)
	{
		$this->customer = $customer;
	}

	/**
	 * @return mixed
	 */
	public function getCustomer()
	{
		return $this->customer;
	}
}